# This file demonstrates:
# - Init containers
# - Sidecar pattern
# To run with Podman: podman play kube sample-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: debian-sample-pod
  labels:
    app: debian-demo
spec:
  # Init containers run before main containers start
  initContainers:
    - name: init-setup
      image: public.ecr.aws/docker/library/debian:trixie
      command:
        - sh
        - -c
        - |
          (
            echo '<html>'
            echo '  <body>'
            printf '    <h1>Init container run at: %s</h1>\n' "$(date)"
            echo '  </body>'
            echo '</html>'
          ) > /data/index.html
      volumeMounts:
        - name: shared-data
          mountPath: /data

  # Main application containers
  containers:
    # Main app runs a Python HTTP server on port 8080
    - name: main-app
      image: public.ecr.aws/docker/library/python:3.13
      command:
        - sh
        - -c
        - |
          echo "Starting Python HTTP server on port 8080...";
          python3 -m http.server 8080 --bind 0.0.0.0
      ports:
        - containerPort: 8080
      volumeMounts:
        - name: shared-data
          mountPath: /data
      workingDir: /data
      resources:
        limits:
          memory: "128Mi"
          cpu: "250m"
        requests:
          memory: "64Mi"
          cpu: "100m"
      livenessProbe:
        httpGet:
          path: /
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        httpGet:
          path: /
          port: 8080
        initialDelaySeconds: 2
        periodSeconds: 5

    # Sidecar periodically curls the main app's HTTP endpoint to show network namespace sharing
    - name: sidecar-logger
      image: public.ecr.aws/docker/library/busybox:1.36
      command:
        - sh
        - -c
        - |
          while true; do 
            echo "Sidecar: requesting main-app at http://localhost:8080";
            wget -O - http://localhost:8080 | tee /tmp/sidecar-curl.log;
            sleep 10;
          done
      volumeMounts:
        - name: shared-data
          mountPath: /data
      resources:
        limits:
          memory: "64Mi"
          cpu: "100m"
        requests:
          memory: "32Mi"
          cpu: "50m"

  # Shared volume between containers
  volumes:
    - name: shared-data
      emptyDir: {}

  # Restart policy for the pod
  restartPolicy: Always
